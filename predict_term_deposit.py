# -*- coding: utf-8 -*-
"""predict term deposit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tLrVqULIr5asXjzJKldhpDXAYa0q2GH8
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df= pd.read_csv('/content/Assignment-2_Data.csv')

df.head()

df.info()

df.describe()

sns.heatmap(df.corr())

df.isnull().sum()

df.eq(0).sum()

df.duplicated().sum()

df=df.dropna()

df.isnull().sum()

df.nunique()

from sklearn.preprocessing import LabelEncoder

encoder = LabelEncoder()
df['job'] = encoder.fit_transform(df['job'])
job = {index : label for index, label in enumerate(encoder.classes_)}
job

df['marital'] = encoder.fit_transform(df['marital'])
marital = {index : label for index, label in enumerate(encoder.classes_)}
marital

df['education'] = encoder.fit_transform(df['education'])
education = {index : label for index, label in enumerate(encoder.classes_)}
education

df['default'] = encoder.fit_transform(df['default'])
default = {index : label for index, label in enumerate(encoder.classes_)}
default

df['loan'] = encoder.fit_transform(df['loan'])
loan = {index : label for index, label in enumerate(encoder.classes_)}
loan

df['contact'] = encoder.fit_transform(df['contact'])
contact = {index : label for index, label in enumerate(encoder.classes_)}
contact

df['month'] = encoder.fit_transform(df['month'])
month = {index : label for index, label in enumerate(encoder.classes_)}
month

df['poutcome'] = encoder.fit_transform(df['poutcome'])
poutcome = {index : label for index, label in enumerate(encoder.classes_)}
poutcome

df['housing'] = encoder.fit_transform(df['housing'])
housing = {index : label for index, label in enumerate(encoder.classes_)}
housing

x = df.drop('y', axis=1)
y = df['y']

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler(copy=True, feature_range=(0, 1))
X = scaler.fit_transform(x)

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=33,random_state=0)

from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier

rf= RandomForestClassifier()
rf.fit(x_train,y_train)

y_pred= rf.predict(x_test)

from sklearn.metrics import accuracy_score

accuracy= accuracy_score(y_pred, y_test)
accuracy

dtc= DecisionTreeClassifier()
dtc.fit(x_train,y_train)

y_pred2= dtc.predict(x_test)

accuracy= accuracy_score(y_pred2, y_test)
accuracy

